---
import CoursesLayout from "@components/layouts/CoursesLayout.astro";
import BonusSpotify from "@components/lessons/BonusSpotify.astro";
import MarkCompleted from "@components/lessons/MarkCompleted";
import Classvideo from "@components/root-program/Classvideo.astro";
import Potenciador from "@components/root-program/Potenciador.astro";
import { eq, lt } from "astro:db";
import { desc } from "astro:db";
import { Course } from "astro:db";
import { gt } from "astro:db";
import { asc } from "astro:db";
import { LessonProgress } from "astro:db";
import { and } from "astro:db";
import { Lesson } from "astro:db";
import { db } from "astro:db";
import { Play } from "lucide-react";

const { slug, CourseSlug } = Astro.params;
console.log("slug", slug);
console.log("CourseSlug", CourseSlug);
if (!slug || !CourseSlug) {
    return Astro.redirect("/404");
}
// console.log(Astro.params.slug);
const { userId, bonus } = Astro.locals;
const [lesson] = await db
    .select()
    .from(Lesson)
    .where(
        and(
            eq(Lesson.slug, slug as string),
            eq(Lesson.courseSlug, CourseSlug as string),
        ),
    );

if (!lesson) {
    return Astro.redirect("/cursos/root-program/404");
}
const [userProgress] = await db
    .select()
    .from(LessonProgress)
    .where(
        and(
            eq(LessonProgress.lessonId, lesson.id),
            eq(LessonProgress.userId, userId as string),
        ),
    );

const isCompleted = userProgress ? true : false;
console.log("isCompleted", isCompleted);
const [lastCompletedLesson] = await db
    .select()
    .from(LessonProgress)
    .where(eq(LessonProgress.userId, userId as string))
    .orderBy(desc(LessonProgress.id))
    .limit(1);
let lastAvailableLessonId = 1;
let lastAvailableLessonSlug = "atrae-clientes-comprometidos";
if (lastCompletedLesson) {
    const [availablelesson] = await db
        .select({ slug: Lesson.slug, id: Lesson.id })
        .from(Lesson)
        .where(eq(Lesson.id, lastCompletedLesson.id + 1))
        .limit(1);
    lastAvailableLessonId = availablelesson ? availablelesson.id : 1;
    lastAvailableLessonSlug = availablelesson
        ? availablelesson.slug
        : "atrae-clientes-comprometidos";
}

// Reemplaza 'default-slug' con el slug de la primera lecci√≥n

const isPotenciador = lesson.slug === "potenciador";
const isFirtstLesson = lesson.id === 1;
const isAvailable = lesson.id <= lastAvailableLessonId + 1;
console.log("isAvailable", isAvailable, lesson.id, lastAvailableLessonId);
const canbeViewed = isFirtstLesson || isAvailable || isPotenciador;
console.log("canbeViewed", canbeViewed);
console.log("slug", slug);
// console.log("lastCompletedLesson ", lastCompletedLesson);

console.log("lastAvailableLessonId", lastAvailableLessonSlug);

const [nextLesson] = await db
    .select({ slug: Lesson.slug })
    .from(Lesson)
    .where(gt(Lesson.id, lesson.id))
    .orderBy(asc(Lesson.id))
    .limit(1);
const [previusLesson] = await db
    .select({ slug: Lesson.slug })
    .from(Lesson)
    .where(lt(Lesson.id, lesson.id))
    .orderBy(desc(Lesson.id))
    .limit(1);

const nextLessonSlug = nextLesson ? nextLesson.slug : null;
const previusLessonSlug = previusLesson ? previusLesson.slug : null;
// console.log("nextLessonSlug", nextLessonSlug);

if (!canbeViewed) {
    return Astro.redirect(`/cursos/${CourseSlug}/${lastAvailableLessonSlug}`);
}

---

<CoursesLayout>
    <div class="h-full w-full">
        {
            lesson.slug === "potenciador" ? (
                bonus === "true" ? (
                    <BonusSpotify />
                ) : (
                    <section
                        transition:persist
                        class="w-full p-6 md:p-10 flex flex-col justify-start gap-10 "
                    >
                        <div class="w-full flex flex-col items-center gap-4">
                            {" "}
                            Compra el potenciador mamu
                        </div>
                    </section>
                )
            ) : (
                <section class="h-full p-6   md:p-10 flex flex-col justify-start gap-10 max-w-screen-xl">
                    <div class="w-full flex items-center gap-4">
                        <Classvideo videoId={lesson.video_id} />
                    </div>
                </section>
            )
        }
    </div>
    {
        (
            <MarkCompleted
                client:load
                lessonId={lesson.id}
                userId={userId as string}
                lessonSlug={slug as string}
                nextLessonSlug={nextLessonSlug}
                previusLessonSlug={previusLessonSlug}
            />
        )
    }
    <div class="text-left flex flex-col items-start w-full md:px-10 p-6">
        <h1
            class="inline-flex items-center text-2xl xl:text-3xl font-semibold pb-4 gap-3"
        >
            <Play className="fill-negro hidden md:block " />Modulo {lesson.id}: {
                lesson.name
            }
        </h1>
        <p class="text-left pb-4">{lesson.description}</p>
    </div>

    <script src="https://open.spotify.com/embed/iframe-api/v1" async></script>
</CoursesLayout>

